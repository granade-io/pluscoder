{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> Software AI Agents working for you Coding Repository maintenance Brainstorming Planning and more.. </p> <p>     A Python agents framework intended for working in repositories. In simple words, programmable agents that code. </p> <ul> <li>PlusCoder is an AI-powered tool that accelerates software development by assisting with planning, coding, and management tasks.</li> <li>The name \u201d+ Coder\u201d extends beyond just \u201cYou + Coder\u201d\u2014it can be paired with other tools, or CI/CD processes, enhancing them with AI.</li> <li>PlusCoder is a versatile assistant specialized for integration with other systems for streamlined, effortless development.</li> </ul>"},{"location":"#why-to-use-pluscoder","title":"Why to use PlusCoder","text":"<ol> <li>It's just Python: Coding agents are designed to work with large codebases efficiently, and they are fully programmable. You can run them in your development environment or in the cloud, leveraging LLM power in an easy sweep in all your repositories.</li> <li>Customizable and Standardizable: You can write custom company-wide specialized agents, instructions and tools. Allowing your entire team to leverage a single centralized configuration of agents.</li> <li>Chat with agents: You can chat with PlusCoder agents directly working with them as a coding partner with same company-wide configurations and guidelines.</li> <li>Task based workflows: PlusCoder allows you to create customizable and standardizable workflows for automating repetitive coding tasks.</li> <li>Multiple LLM providers: Choose your preferred LLM provider, such as OpenAI, Anthropic, or VertexAI, and everything supported by LiteLLM.</li> </ol>"},{"location":"#basic-examples","title":"Basic Examples","text":"<p>Instruct agent to work in the current repository:</p> pythonCLIIn-Chat <pre><code>from pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.workflow import run_agent\n\n\nasync def main():\n    # Select specific agent\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(model=\"gpt-4o\")\n\n    # Runs agent in the current workdir\n    await run_agent(\n        agent=developer_agent,\n        input=\"Write a detailed README.md file specifying develop environment setup using commands present in Makefile\"\n    )\n</code></pre> <pre><code>pluscoder --default_agent developer \\\n--auto_confirm yes \\\n--input \"Write a detailed README.md file specifying develop environment setup using commands present in Makefile\"\n</code></pre> <pre><code>&gt; You: Write a detailed README.md file specifying develop environment setup using commands present in Makefile\n</code></pre>"},{"location":"#next-steps","title":"Next steps","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>Examples</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We will appreciate any contribution to PlusCoder!</p>"},{"location":"contributing/#start-pluscoding","title":"Start Pluscoding!","text":"<ol> <li> <p>Clone the forked instance of the repository:</p> <pre><code>git clone https://github.com/&lt;your_username&gt;/pluscoder.git\ncd pluscoder\n</code></pre> </li> <li> <p>Be sure of having pip, and install pre-commit:</p> <pre><code>pipx install pre-commit\n</code></pre> </li> <li> <p>Install PlusCoder module and dependencies:</p> <pre><code>make install\n</code></pre> </li> </ol>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Requires Python 3.12.</li> <li>Requires llvm</li> </ul> Any OSMacOS <pre><code>bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\"\n</code></pre> <pre><code>brew install llvm@14\n</code></pre> <p>Install PlusCoder as Python library:</p> uvpip <pre><code>uv tool install pluscoder --python 3.12\n</code></pre> <pre><code>pip install pluscoder\n</code></pre> <p>This install everything needed to use PlusCoder with different providers.</p> <p>You can check the installed version with:</p> <pre><code>pluscoder --version\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Configuration</li> <li>CLI Usage</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":"<p>You can run PlusCoder in two ways:</p> <ul> <li>Interactively: Chat with PlusCoder agents in your terminal and instruct them to interact with your local files and directories.</li> <li>Programmatically: Write scripts to interact with PlusCoder using its API. Running it in your local machine or cloud environments.</li> </ul>"},{"location":"quick_start/#interactively","title":"Interactively","text":""},{"location":"quick_start/#basic-chat-with-agents","title":"Basic chat with agents","text":"<p>After installing PlusCoder, start a chat with pre-defined &amp; company-wide agents by running:</p> <pre><code>cd /path/to/your/project\nexport OPENAI_API_KEY=&lt;your_openai_api_key&gt;\npluscoder --model gpt-4o --skip_repo_index\n</code></pre> <p>Info</p> <p>You can also specify any CLI config flag using environment variables or inside pluscoder-config.yaml file. Check configuration options at Configuration or by running <code>pluscoder -h</code>.</p> <p>Info</p> <p>First time you run <code>pluscoder</code> you will be prompted to specify your preferred LLM provider and model.  You can also specify the provider and model using the <code>provider</code> and <code>model</code> options. Check all supported providers at Providers Section.</p> <p>Agents by default can read/write local repository files. You can run agents using read-only mode by adding the <code>read_only</code> flag.</p> <pre><code>pluscoder --read_only --skip_repo_index\n</code></pre> <p>Check repository files that agents have access to by running:</p> <pre><code>pluscoder --show_repo\n</code></pre> <p>Or using the in-chat command <code>/show_repo</code>.</p>"},{"location":"quick_start/#optimized-chat-with-indexed-repository","title":"Optimized chat with indexed repository","text":"<p>To optimize the chat experience, we recommend to enable repository indexing. For that just remove the <code>skip_repo_index</code> flag and specify an embedding model using the <code>embedding_model</code> config.</p> <pre><code>export OPENAI_API_KEY=&lt;your_openai_api_key&gt;\nexport COHERE_API_KEY=&lt;your_cohere_api_key&gt;\npluscoder --model gpt-4o --embedding_model cohere/embed-english-v3.0\n</code></pre> <p>Info</p> <p>Using an embedding model usually incurs additional costs. We recommend using it along <code>repo_exclude_files</code> config option to exclude specific files from indexing.</p>"},{"location":"quick_start/#automated-runs-with-cli","title":"Automated runs with CLI","text":"<p>You can use <code>auto_confirm</code> flag to automatically confirm all prompts. This is useful for automated runs.</p> <pre><code>pluscoder --auto_confirm yes --user_input \"Write unit tests for all functions in the `utils.py` file\"\n</code></pre>"},{"location":"quick_start/#programmatically","title":"Programmatically","text":"<p>PlusCoder provides an API to interact with the system programmatically. Here's an example of how to use it to run an agent in the current workdir with a given input:</p> <pre><code>from pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.workflow import run_agent\n\n\nasync def main():\n    # Select specific agent\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(model=\"gpt-4o\")\n\n    # Runs agent in the current workdir\n    await run_agent(\n        agent=developer_agent,\n        input=\"Write a detailed README.md file specifying develop environment setup using commands present in Makefile\"\n    )\n</code></pre>"},{"location":"quick_start/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Configuration section for more customization.</li> <li>Read Agents section to learn how to use pre-defined agents and to setup custom ones.</li> <li>Check Examples section to learn how to setup PlusCoder for different common use-cases.</li> </ul>"},{"location":"documentation/agents/","title":"Agents","text":"<p>PlusCoder core system relies on agents to perform tasks and provide assistance to the user.</p>"},{"location":"documentation/agents/#features","title":"Features","text":"<p>PlusCoder agents have the following features:</p> Feature Description Example instruction <code>Filesystem interaction</code> Agents can create/edit files on the repository workspace. <code>Read core files and explain me what is this repository about</code> <code>File downloading</code> Agents can download files from external sources given their raw URLs when instructed to do. <code>Read https://github.com/granade-io/pluscoder/blob/develop/CODING_GUIDELINES.md and apply them to utils.py</code> <code>Multi-modal support</code> Agents can read images passed as input by the user using <code>img::&lt;img_url&gt;</code> or pasting an image with Ctrl+V  during the conversation. <code>I'd like you to code a navbar.js identical to this one at img::https://user-images.githubusercontent.com/25878302/212479928-553c2d37-793b-4bcd-ac53-352f26337955.jpg</code> <code>Test and Lint support</code> After editions, agents will execute tests and linting commands in the repository workspace and try recover from errors. See config here. <code>update validate_email to handle validation using a regex</code> <p>Multi-modal support</p> <p>Not all models support multi-modal inputs. And we rely en OpenAI's API scheme to provide this feature. Providers like OpenAI and Anthropic support multi-modal inputs.</p> <p>Recover from errors</p> <p>Agents will try to recover from errors at most 3 times to avoid infinite loops and cost overruns. We recommend to specify just key linting and testing commands in the configuration to avoid unnecessary errors.</p>"},{"location":"documentation/agents/#predefined-agents","title":"Predefined Agents","text":"<p>PlusCoder comes with a set of predefined agents that can be used in your conversations or automated runs.</p> <ul> <li><code>Orchestrator</code>: Agent that helps you define a task list based plan. It also run the tasks delegating them to other agents until each task is completed.</li> </ul> <p>Using Orchestrator</p> <p>When using the Orchestrator agent, be clear with your intentions. Tell the agent to \"create a plan\" and to \"delegate it\" to other agents after reviewing it.</p> <p>Example:</p> CLIIn-Chat <pre><code>pluscoder \\\n--default_agent orchestrator \\\n--auto_confirm yes \\\n--user_input \"I need to refactor main.py into utils.py and config.py; Create a plan with a task to refactor and a second task to add unit tests for new files. Delegate it immediately\" \n</code></pre> <pre><code>&gt; You: I need to refactor main.py into utils.py and config.py; Create a plan with a task to refactor and a second task to add unit tests for new files. Show me the plan.\n&gt; Orchestrator: &lt;plan output&gt;\n&gt; You: Delegate it\n</code></pre> <ul> <li><code>Developer</code>: Agent to perform general development tasks through code generation.</li> </ul> <p>Using Developer</p> <p>Developer can read/edit files by itself. You can ask it to generate code, fix errors, or create new files. If you don't want Developer agent to edit files, tell it explicitly.</p> <ul> <li><code>Domain Stakeholder</code>: Agent useful for discussing project details, design decisions, business requirements, roadmap, etc. It will ask you key questions to help you achieve your goals.</li> </ul> <p>Using Domain Stakeholder</p> <p>Stakeholder can read/edit files the same way as Developer. Talk with it when some inspiration is needed or when you are unsure about how to proceed.</p>"},{"location":"documentation/agents/#custom-agents","title":"Custom Agents","text":"<p>Custom agents can be defined using <code>custom_agents</code> configuration in PlusCoder.</p> <p>Agents perform better when their instruction are specific to the problem domain we are working on.</p>"},{"location":"documentation/agents/#use-cases","title":"Use Cases","text":"<p>You can use custom agents for:</p> <ol> <li>Having custom knowledge and instructions to perform specific tasks:<ol> <li>For example, a <code>CodeReviewer</code> agent can be created to review code changes and provide feedback on code quality, best practices, and potential issues.</li> <li>A <code>DocstringGenerator</code> agent can be created to generate docstrings for specified files following a specific format or guidelines.</li> <li>A <code>Brainstormer</code> agent can be created to propose ideas for implementation without editing the codebase.</li> <li>A <code>CodeStyleEnforcer</code> agent can be created to enforce code style guidelines in the codebase.</li> </ol> </li> <li>Having experts in different domains:<ol> <li>For example, a <code>SecurityExpert</code> agent can be created to review security vulnerabilities in the codebase.</li> <li>A <code>VueJsExpert</code> agent can be created to provide guidance on Vue.js specific problems.</li> <li><code>MyCompanyExpert</code> agent can be created to provide expert advice on specific aspects of your company's business.</li> </ol> </li> <li>Having custom tools and integrations:<ol> <li>For example, a <code>JiraIntegration</code> agent can be created to interact with Jira API to create issues, assign tasks, or update issues.</li> <li>A <code>SlackIntegration</code> agent can be created to interact with Slack API to send messages, create channels, or update messages.</li> <li>A <code>GithubIssuesIntegration</code> agent can be created to interact with Github API to create issues, assign tasks, or update issues.</li> </ol> </li> </ol>"},{"location":"documentation/agents/#related-docs","title":"Related Docs","text":"<ul> <li>Configuration</li> <li>CLI Usage</li> </ul>"},{"location":"documentation/automation/","title":"Automation","text":"<p>Automation can be reached in two ways: out-of-the-box using the CLI and through custom python scripts.</p>"},{"location":"documentation/automation/#cli","title":"CLI","text":"<p>PlusCoder CLI handles most core functionalities automatically, so you can just give an instruction or task list to agents to work in the repository without any additional code or configuration.</p> <pre><code>pluscoder --user_input \"List all open issues in the 'pluscoder/pluscoder' repository\" --default_agent developer --auto_confirm yes\n</code></pre> <p>Tip</p> <p>The <code>--auto_confirm</code> flag is used to skip the confirmation steps allowing agents to run freely.</p> <p>Under the hood:</p> <ul> <li>CLI reads configuration from different sources</li> <li>Repository is indexed using embedding model if its defined</li> <li>Detects task list and parses it to run Orchestrator Agent with orchestrated workflow</li> </ul>"},{"location":"documentation/automation/#basic-examples","title":"Basic examples","text":""},{"location":"documentation/automation/#basic-coding-instruction","title":"Basic coding instruction","text":"<pre><code>pluscoder --user_input \"Write unit tests for api/endpoints.py endpoints\" --default_agent developer --auto_confirm yes\n</code></pre>"},{"location":"documentation/automation/#instruction-supported-with-remote-guidelines","title":"Instruction supported with remote guidelines","text":"<pre><code>pluscoder --user_input \"Read the 'Code Style Guide' file at https://github.com/pluscoder/pluscoder/blob/main/docs/CodeStyleGuide.md and apply it to the codebase\" --default_agent developer --auto_confirm yes\n</code></pre>"},{"location":"documentation/automation/#handling-multiple-repositories","title":"Handling multiple repositories","text":"<pre><code>#!/bin/bash\n\nrepositories=(\"granade-io/pluscoder\" \"granade-io/pluscoder-docs\" \"granade-io/pluscoder-cli\")\n\nfor repo in \"${repositories[@]}\"; do\n    echo \"Running PlusCoder for $repo...\"\n    # PlusCoder will clone the repository\n    pluscoder \\\n        --repository $repo \\\n        --source_branch develop \\\n        --user_input \"Add README.md file following guidelines at https://github.com/granade-io/pluscoder/blob/main/docs/README-GUIDELINES.md\" \\\n        --default_agent developer \\\n        --auto_confirm yes \\\n        --auto_commit false\n    cd $repo\n    git add README.md\n    git commit -m \"Add README.md file\"\n    git push origin develop\n    cd ..\ndone\n</code></pre>"},{"location":"documentation/automation/#task-list-for-complex-instructions","title":"Task list for complex instructions","text":"<p>You can define a task list to achieve more complex instructions. Orchestrator agent will handle the task list and delegate tasks to agents until each task is completed.</p> task_list.json <pre><code>{\n\n    \"objective\": \"Update API endpoints documentation\",\n    \"task_list\": [\n    {\n        \"objective\": \"Apply Google Python Style Guide to main app file\",\n        \"details\": \"\"\"\n        - Read Python style guide from https://google.github.io/styleguide/pyguide.html\n        - Apply formatting rules to app/main.py\n        - Fix docstrings format\n        - Adjust import order\n        - Fix naming conventions\n        \"\"\",\n        \"restrictions\": \"Only modify app/main.py file, keep functionality intact\",\n        \"outcome\": \"main.py formatted according to Google Python Style Guide\",\n        \"agent\": \"developer\",\n        \"completed\": false,\n        \"is_finished\": false\n    },\n    {\n        \"objective\": \"Update API endpoints documentation\",\n        \"details\": \"\"\"\n        - Follow OpenAPI 3.0 spec from https://spec.openapis.org/oas/v3.0.3\n        - Update documentation for /users endpoints\n        - Update documentation for /auth endpoints\n        \"\"\",\n        \"restrictions\": \"Only modify api/docs/endpoints.yaml file\",\n        \"outcome\": \"API documentation updated following OpenAPI 3.0 specification\",\n        \"agent\": \"developer\",\n        \"completed\": false,\n        \"is_finished\": false\n    }\n    ]\n}\n</code></pre> <p>PlusCoder will use the orchestration workflow to delegate tasks to agents:</p> <pre><code>pluscoder --task_list task_list.json --auto_confirm yes\n</code></pre> <p>Task list recommendations</p> <p>Task list are executed sequentially and each agent will work on its task until it's completed. We recommend:</p> <ol> <li>Keep tasks simple and focused</li> <li>Define clear objectives and outcomes</li> <li>Use restrictions to avoid unwanted changes</li> <li>Specify involved files and/or guidelines to accomplish the task</li> </ol>"},{"location":"documentation/automation/#python","title":"Python","text":"<p>Warning</p> <p>This feature is still in development.</p>"},{"location":"documentation/automation/#related-docs","title":"Related Docs","text":"<ul> <li>Configuration</li> <li>Agents</li> <li>CLI Usage</li> </ul>"},{"location":"documentation/cli-commands/","title":"Commands","text":"<p>PlusCoder provides several built-in commands to help you manage conversations, repository interactions, and configuration. All commands start with <code>/</code>.</p>"},{"location":"documentation/cli-commands/#general-commands","title":"General Commands","text":"Command\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>/help</code> Displays help information for all available commands. <code>/clear</code> Clears the entire chat history with current agent. <code>/config</code> Override any PlusCoder configuration setting.Usage:<code>/config &lt;setting_name&gt; &lt;value&gt;</code>Example:<code>/config auto_commits false</code>"},{"location":"documentation/cli-commands/#agent-management-commands","title":"Agent Management Commands","text":"Command\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>/agent</code> Start a new conversation with another agent. Can optionally preserve chat history.Usage:<code>/agent [agent_name]</code>If no agent name is provided, shows interactive selection. <code>/agent_create</code> Creates a new persistent specialized agent to chat with. Interactive process to define:- Code-base interaction capabilities- File editing permissions- Agent specialization and description"},{"location":"documentation/cli-commands/#repository-management-commands","title":"Repository Management Commands","text":"Command\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>/diff</code> Shows the diff of the last commit. <code>/undo</code> Reverts last commit and removes messages from history until last user message. <code>/show_repo</code> Displays repository files tree in the current context."},{"location":"documentation/cli-commands/#configuration-system-commands","title":"Configuration &amp; System Commands","text":"Command\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>/show_config</code> Displays current PlusCoder configuration and config file locations. <code>/run</code> Executes a system command and displays its output.Usage:<code>/run &lt;command&gt;</code>Example:<code>/run git status</code>"},{"location":"documentation/cli-commands/#custom-prompt-commands","title":"Custom Prompt Commands","text":"Command\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>/custom</code> Gives the current agent a pre-defined set of instruction including (optional) additional instructions. Check how to define custom instructions at Custom Prompt Command section. Usage:<code>/custom &lt;prompt_name&gt; [additional instructions]</code>Example:<code>/custom docstrings files display.py and utils.py</code>"},{"location":"documentation/cli/","title":"PlusCoder CLI","text":"<p>PlusCoder provides an enhanced command-line interface for efficient interaction:</p> <p>Warning</p> <p>Some of these features are not available when running inside Docker. Like image pasting using Ctrl + V.</p> Action Description Input History Press the Up Arrow Recall and reuse previous inputs. Multiline Input Press <code>Ctrl + Return</code> or <code>Option + Return</code> Create a new line for multiline commands. Input Clearing Press <code>Ctrl + C</code> Clear the current text in the input field. File Autocomplete Start typing a filename. Use <code>Tab</code> to alternate suggestions. Get suggestions and autocomplete file paths. Paste Support Paste multiline text directly Use standard paste commands in the input field. Quick Confirmation Use <code>y</code> or <code>Y</code> Quickly confirm prompts or actions. Image as context Write <code>img::&lt;url&gt;</code> or <code>img::&lt;local_path&gt;</code> Pass images to agents. Pasting Images Press <code>Ctrl + V</code> Copy images and paste it directly into the terminal to pass the to agents."},{"location":"documentation/cli/#next-steps","title":"Next Steps","text":"<ul> <li>CLI Commands</li> </ul>"},{"location":"documentation/configuration/","title":"Configuration","text":""},{"location":"documentation/configuration/#configuration-methods","title":"Configuration methods","text":"<p>PlusCoder can be configured using several methods (following this precedence order):</p> <ol> <li>Python global Settings class</li> <li>The <code>/config</code> in-chat command at runtime</li> <li>Command-line arguments when running <code>pluscoder</code> command.</li> <li>Dotenv variables ( <code>.env</code> file in the repository root)</li> <li><code>.pluscoder-config.yml</code> config file in the repository root</li> <li>Environment variables</li> <li>Global PlusCoder yaml config file (<code>~/.config/pluscoder/config.yml</code> or <code>AppData/Local/pluscoder/config.yml</code>)</li> <li>Global environment variables file (<code>~/.config/pluscoder/vars.env</code> or <code>AppData/Local/pluscoder/vars.env</code>)</li> </ol> <p>Same option can be configured using different methods as mentioned:</p> PythonCLI.env.pluscoder-config.ymlEnv VarsGlobal config.ymlGlobal vars.env <pre><code>from pluscoder.config import Settings\n\n# Get current global settings\nsettings = Settings()\n\n# Updates it\nsettings.reconfigure(\n    model=\"gpt-4o\"\n)\n</code></pre> <pre><code>pluscoder --model gpt-4o\n# other options...\n</code></pre> <pre><code>MODEL=gpt-4o\n# other options...\n</code></pre> <pre><code>model: gpt-4o\n# other options...\n</code></pre> <pre><code>export MODEL=gpt-4o\npluscoder\n</code></pre> <pre><code>model: gpt-4o\n# other options...\n</code></pre> <pre><code>MODEL=gpt-4o\n# other options...\n</code></pre> <p>Credentials</p> <p>Credentials and keys must be provided as environment variables, using <code>.env</code> or global <code>~/.config/pluscoder/vars.env</code> env file. Passing credentials in other files won't work.</p> <p>To display current configuration settings, run in-chat command <code>/show_config</code> or pass config flag <code>show_config</code>.</p> <pre><code>pluscoder --show_config\n</code></pre> <p>Global configuration files location</p> <p><code>--show_config</code> will also display configuration files location specific to your operating system.</p>"},{"location":"documentation/configuration/#configuration-options","title":"Configuration options","text":""},{"location":"documentation/configuration/#application-behavior","title":"Application Behavior","text":"<ul> <li><code>read_only</code>: Enable/disable read-only mode to avoid file editions (default: <code>False</code>)</li> <li><code>streaming</code>: Enable/disable LLM streaming (default: <code>True</code>)</li> <li><code>auto_confirm</code>: Enable/disable auto confirmation of PlusCoder execution (default: <code>False</code>)</li> <li><code>hide_thinking_blocks</code>: Hide thinking blocks in LLM output (default: <code>True</code>)</li> <li><code>hide_output_blocks</code>: Hide output blocks in LLM output (default: <code>False</code>)</li> <li><code>hide_source_blocks</code>: Hide source blocks in LLM output (default: <code>False</code>)</li> <li><code>show_token_usage</code>: Show token usage/cost (default: <code>True</code>)</li> <li><code>default_agent</code>: Specify the name/number of the default agent to use. If not specified selection will be interactive (default: <code>None</code>)</li> </ul>"},{"location":"documentation/configuration/#file-paths","title":"File Paths","text":"<ul> <li><code>log_filename</code>: Filename for logs (default: <code>\"pluscoder.log\"</code>)</li> </ul>"},{"location":"documentation/configuration/#models-and-providers","title":"Models and Providers","text":"<p>Models:</p> <ul> <li><code>model</code>: LLM model to use. Required. (default: <code>None</code>)</li> <li><code>orchestrator_model</code>: LLM model to use for orchestrator (default: same as <code>MODEL</code>)</li> <li><code>embedding_model</code>: Embedding model to use for building vector database of the repository (default: <code>None</code>).</li> </ul> <p>Indexing with Embedding Model</p> <p>To improve LLMs performance, we strongly recommend using an embedding model. This will allow PlusCoder to index the repository and provide better context to the AI. Check some examples at Indexing.</p> <p>Provider:</p> <ul> <li><code>provider</code>: LLM provider to use. If <code>None</code>, provider will be selected based on available environment variables credentials. Options: <code>aws_bedrock</code>, <code>openai</code>, <code>litellm</code>, <code>anthropic</code>, <code>vertexai</code>, <code>google</code> (default: <code>None</code>)</li> <li><code>orchestrator_model_provider</code>: Provider to use for orchestrator agent (default: same as <code>PROVIDER</code>)</li> </ul> <p>Check detailed information about all available providers at Providers.</p>"},{"location":"documentation/configuration/#repository-settings","title":"Repository Settings","text":"<p>Use these when running PlusCoder in remote repositories for automated runs. Check how at Automated Runs.</p> <ul> <li><code>repository</code>: Git repository path or URL to clone and process (default: <code>None</code>)</li> <li><code>source_branch</code>: Specify source branch to checkout when cloning repository (default: <code>None</code>)</li> <li><code>repo_exclude_files</code>: List of regex patterns to exclude files from repo operations (default: <code>[]</code>)</li> <li><code>repo_include_only_files</code>: List of regex patterns to include only specific files from repo operations (default: <code>[]</code>)</li> </ul> .pluscoder-config.yml <pre><code># exclude files based on their extensions from agents context\nrepo_exclude_files: [\".(png|jpg|jpeg|svg)\"]\n# include only Python and Markdown files\nrepo_include_only_files: [\".py\"]\n</code></pre> <p>Known issue</p> <p>Do not use \\ (backslash) symbol in the regex patterns to scape characters, yaml won't parse. Use <code>.</code> instead.</p>"},{"location":"documentation/configuration/#git-settings","title":"Git Settings","text":"<ul> <li><code>auto_commits</code>: Enable/disable automatic Git commits after successful agent file editions (default: <code>False</code>)</li> <li><code>allow_dirty_commits</code>: Allow commits in a dirty repository (default: <code>False</code>)</li> </ul>"},{"location":"documentation/configuration/#test-and-lint-settings","title":"Test and Lint Settings","text":"<p>Tests and Lint commands are executed after any file edition. Agents will try to fix any error found by these commands.</p> <ul> <li><code>run_tests_after_edit</code>: Run tests after file edits (default: <code>False</code>)</li> <li><code>run_lint_after_edit</code>: Run linter after file edits (default: <code>False</code>)</li> <li><code>test_command</code>: Command to run tests (default: <code>None</code>)</li> <li><code>lint_command</code>: Command to run linter (default: <code>None</code>)</li> <li><code>auto_run_linter_fix</code>: Automatically run linter fix before linting (default: <code>False</code>)</li> <li><code>lint_fix_command</code>: Command to run linter fix (default: <code>None</code>)</li> </ul> .pluscoder-config.yml <pre><code>run_tests_after_edit: true\nrun_lint_after_edit: true\nauto_run_linter_fix: true\ntest_command: make test\nlint_command: make lint\nlint_fix_command: make lint-fix\n</code></pre>"},{"location":"documentation/configuration/#custom-prompt-commands","title":"Custom Prompt Commands","text":"<p>Custom prompt commands allow you to define pre-configured prompts/instruction that can be easily executed during runtime and passed to agents.</p> <ul> <li><code>custom_prompt_commands</code>: List of custom prompts (default: <code>[]</code>). Each containing:<ul> <li><code>prompt_name</code>: A unique name for the command</li> <li><code>description</code>: A brief description of what the command does</li> <li><code>prompt</code>: The prompt suffix text to be sent to the agent along a custom message</li> </ul> </li> </ul> .pluscoder-config.yml <pre><code>custom_prompt_commands:\n  - prompt_name: docstring\n    prompt: |\n      Please add docstring to these files above\n    description: \"Generate docstring for specified files\"\n  - prompt_name: brainstorm\n    description: Propose ideas for implementation without editing code base.\n    prompt: |\n      Based on the previous request, please perform a brainstorm of how could this achieved. \n        1. Read key files, analyze them\n        2. Tell me with a bullet point list, the role of each involved file\n        3. Tell me a proposed plan in natural language\n      Follow instructions above without editing files\n</code></pre> <p>During the chat in the interactive mode, you can use these custom instructions as follows:</p> In-chat <pre><code>/custom docstring\n/custom brainstorm i want a new api endpoints to register users and authenticate them\n</code></pre>"},{"location":"documentation/configuration/#custom-agents","title":"Custom Agents","text":"<p>PlusCoder supports the creation of custom agents with different specializations. These agents can be defined in the configuration and used alongside the predefined agents.</p> <ul> <li><code>custom_agents</code> List of custom agent configurations (default: <code>[]</code>). Each containing:<ul> <li><code>name</code>: A unique name for the agent</li> <li><code>description</code>: a description of the agent</li> <li><code>prompt</code>: The system prompt defining the agent's role and capabilities</li> <li><code>repository_interaction</code>: Where or not the agent can interact with the repository. Useful for agents repository agnostic.</li> <li><code>read_only</code>: Boolean indicating whether the agent is restricted to read-only file operations</li> <li><code>reminder</code>: Reminder to the agent to send with every user message</li> <li><code>default_context_files</code>: Files that the agent will read automatically every chat session or execution</li> <li><code>tools</code>: Names of the tools available for the agent. By default (if not defined) all pre-defined tools are available.</li> </ul> </li> </ul> .pluscoder-config.yml <pre><code>custom_agents:\n  - name: CodeReviewer\n    description: Agent description\n    prompt: \"You are a code reviewer. Your task is to review code changes and provide feedback on code quality, best practices, and potential issues.\"\n    read_only: true\n  - name: DocumentationWriter\n    description: Agent description\n    prompt: \"You are a technical writer specializing in software documentation. Your task is to create and update project documentation, including README files, API documentation, and user guides.\"\n    read_only: false\n</code></pre> <p>Custom agents can be selected at the start of the chat in the interactive mode, by using <code>default_agent</code> option or by using the <code>/agent</code> command followed by the agent name.</p> CLIIn-chat <pre><code># choose agent by name\npluscoder --default_agent codereviewer\n# or by number in the given list\npluscoder --default_agent 4\n</code></pre> <pre><code>/agent CodeReviewer\n</code></pre> <p>You can also create a custom agent using the <code>/agent_create</code> command.</p>"},{"location":"documentation/configuration/#related-docs","title":"Related Docs","text":"<ul> <li>Agents</li> <li>CLI Usage</li> </ul>"},{"location":"documentation/indexing/","title":"Repository Indexing","text":""},{"location":"documentation/indexing/#overview","title":"Overview","text":"<p>PlusCoder came along with a powerful indexing system that allows you to index your repositories and search through them. The indexing system is based on the bm25s library and embedding. This allows you to just ask anything to agents and they will find any relevant file to handle your request, by performing an hybrid search using <code>bm25</code> and <code>embeddings</code>.</p> <p>Indexing algorithm</p> <p>By default, <code>bm25</code> is always enabled when using the CLI. <code>embedding</code> algorithm is enabled by specifying the <code>embedding_model</code> option that works with LiteLLM provider. You can skip the <code>embedding</code> algorithm by specifying the <code>skip_repo_index</code> option or by unsetting the <code>embedding_model</code> option.</p>"},{"location":"documentation/indexing/#indexing-through-cli","title":"Indexing through CLI","text":"<p>CLI repository indexing occurs out of the box. When you run the CLI, it will index all files tracked in your repository by default. </p> <p>bm25 search only (no embedding indexation): <pre><code># Will index all files in the repository by using bm25 only\nexport OPENAI_API_KEY=&lt;your_openai_api_key&gt;\npluscoder --default_agent developer --model gpt-4o\n</code></pre></p> <p>hybrid search (bm25 and embedding indexation): <pre><code># Will index all files in the repository by using bm25 and embedding\nexport OPENAI_API_KEY=&lt;your_openai_api_key&gt;\nexport COHERE_API_KEY=&lt;your_cohere_api_key&gt;\npluscoder --default_agent developer --model gpt-4o --embedding_model cohere/embed-english-v3.0\n</code></pre></p>"},{"location":"documentation/indexing/#indexing-through-python","title":"Indexing through Python","text":"<p>You can also index your repository programmatically, which is not done by default.</p> <p>bm25 search only (no embedding indexation):</p> <pre><code>from pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.search.builtin import setup_search_engine\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.workflow import run_agent\n\nasync def main():\n    # Setup search engine globally so agents can use it\n    await setup_search_engine(show_progress=True)\n\n    # Select specific agent\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(model=\"gpt-4o\")\n\n    # Agents will use the search engine to find relevant files automatically thanks to global setup\n    await run_agent(agent=developer_agent, input=\"Refactor models and endpoint following REFACTORING_GUIDELINES.md\")\n</code></pre> <p>hybrid search (bm25 and embedding indexation):</p> <pre><code>from pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.search.builtin import setup_search_engine\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.workflow import run_agent\n\nasync def main():\n    # Setup search engine globally so agents can use it\n    await setup_search_engine(show_progress=True, embedding_model=\"cohere/embed-english-v3.0\")\n\n    # Select specific agent\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(model=\"gpt-4o\")\n\n    # Agents will use the search engine to find relevant files automatically thanks to global setup\n    await run_agent(agent=developer_agent, input=\"Refactor models and endpoint following REFACTORING_GUIDELINES.md\")\n</code></pre>"},{"location":"documentation/indexing/#indexing-persistency","title":"Indexing persistency","text":"<p>The indexing system is persistent and will be saved in the <code>.pluscoder</code> directory in your repository. This allows you to keep the index up-to-date and avoid re-indexing the repository every time you run the CLI or the Python API.</p> <p>Re-indexing</p> <p>CLI detects changes in the repository and will re-index the repository if it detects any changes. This is useful when you add, update or remove files from the repository.</p> <p>Removing indexing</p> <p>You can remove the index by deleting the <code>.pluscoder</code> directory in your repository, or more specifically the <code>.pluscoder/search_index</code> directory inside it. This will force the CLI to re-index the repository next time you run it.</p>"},{"location":"documentation/providers/","title":"Providers","text":"<p>PlusCoder support multiple providers by using LiteLLM, but we also support some native providers like OpenAI, Anthropic and VertexAI.</p>"},{"location":"documentation/providers/#setup-provider-and-model","title":"Setup provider and model","text":"<p>You can specify <code>provider</code> and <code>model</code> options with different methods. Check how at the Configuration section.</p> CLIPython <pre><code>pluscoder --provider &lt;your-provider&gt; --model &lt;your-model&gt;\n</code></pre> <pre><code>from pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.type import AgentConfig\n\n# Setup provider and model when overriding agent defaults\ndeveloper_agent: AgentConfig = DeveloperAgent.to_agent_config(provider=\"openai\", model=\"gpt-4o\")\n\n# Or update agent on the fly\ndeveloper_agent.provider = &lt;your-provider&gt;\ndeveloper_agent.model = &lt;your-model&gt;\n</code></pre> <p>Tip</p> <p>When no provider is specified, provider is inferred from credentials available in the environment variables. For example, if you have <code>OPENAI_API_KEY</code> set, OpenAI provider will be used, requiring only <code>model</code> option to run PlusCoder.</p>"},{"location":"documentation/providers/#supported-providers","title":"Supported providers","text":""},{"location":"documentation/providers/#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=&lt;your_openai_api_key&gt;\nexport OPENAI_API_BASE=&lt;your_openai_api_base&gt;\npluscoder --provider openai --model gpt-4o\n</code></pre>"},{"location":"documentation/providers/#anthropic","title":"Anthropic","text":"<pre><code>export ANTHROPIC_API_KEY=&lt;your_anthropic_api_key&gt;\npluscoder --provider anthropic --model claude-3-5-sonnet-20241022\n</code></pre>"},{"location":"documentation/providers/#vertexai","title":"VertexAI","text":"<p>VertexAI provider requires gcloud CLI installed and authenticated.</p> <p>Check available models at VertexAI Model Garden.</p> <pre><code>pluscoder --provider vertexai --model claude-3-5-sonnet-v2@20241022\n</code></pre> <p>Note</p> <p>VertexAI requires to enable its API and models along proper IAM permissions before using it.</p>"},{"location":"documentation/providers/#google","title":"Google","text":"<p>Google provider is used for Google AI Studio. </p> <pre><code>export GOOGLE_API_KEY=&lt;your_google_ai_studio_api_key&gt;\npluscoder --provider google --model gemini-1.5-pro\n</code></pre>"},{"location":"documentation/providers/#aws-bedrock","title":"AWS Bedrock","text":"<p>AWS Bedrock provider requires AWS CLI installed and authenticated.</p> <pre><code>export AWS_ACCESS_KEY_ID=&lt;your_aws_access_key_id&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;your_aws_secret_access_key&gt;\nexport AWS_PROFILE=&lt;your_aws_profile&gt;\npluscoder --provider aws_bedrock --model anthropic.claude-3-5-sonnet-20241022-v2:0\n</code></pre>"},{"location":"documentation/providers/#litellm","title":"LiteLLM","text":"<p>You can use LiteLLM to access multiple providers and models.</p> <pre><code>export OPENAI_API_KEY=&lt;your_openai_api_key&gt;\npluscoder --provider litellm --model openai/gpt-4o\n</code></pre>"},{"location":"documentation/tools/","title":"Tools","text":"<p>To properly work with a repository, PlusCoder agents have access to a set of tools that help them to perform tasks and instructions. These tools are used to interact with the repository, and more.</p>"},{"location":"documentation/tools/#pre-defined-tools","title":"Pre-defined tools","text":"<p>By default all agents have access to the following tools:</p> Tool Description read_files Allows agents to read multiple repository files at once, getting their contents to analyze code and documentation move_files Enables agents to move multiple files between different locations in the repository structure read_file_from_url Provides agents capability to read files from external URLs and repository links query_repository Lets agents search through repository files and code snippets using natural language queries to find relevant information <p>Most of the time there is no need to disable these tools, but if you want to do so, you can configure agents to disable some of them:</p> Python <pre><code>from pluscoder.tools import base_tools\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.agents.core import DeveloperAgent\n\nasync def main():\n    # Override agent default tools\n    disabled_tool_names = ['read_files', 'move_files', 'query_repository']\n    tool_names = [tool.name for tool in tools.base_tools if tool.name not in disabled_tool_names]\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(tools=tool_names)\n</code></pre> <p>Specifying tools for custom agents</p> <p>Custom Agents can also be configured to use a specific set of tools. By default all pre-defined tools are available.</p>"},{"location":"documentation/tools/#custom-tools","title":"Custom tools","text":"<p>In addition to the pre-defined tools, you can create custom tools to extend the capabilities of the agents. Custom tools can be created through Python.</p> <p>Custom tools are not available in the interactive mode</p> <p>Custom tools are not available in the interactive mode, but they can be used in the Python API.</p> <p>Here an example to read open issues and read issue details:</p> Python <pre><code>from langchain_core.tools import tool\nfrom pluscoder.tools import base_tools\nfrom pluscoder.type import AgentConfig\nfrom pluscoder.agents.core import DeveloperAgent\nfrom pluscoder.workflow import run_agent\nfrom pluscoder.search.builtin import setup_search_engine\n\n@tool\ndef read_open_repository_issues() -&gt; str:\n    \"Read most recent open issues from the repository\"\n    ...\n    &lt;logic&gt;\n    ...\n    return f\"Issues: {issues_text}\"\n\n@tool\ndef read_issue_details(issue_id: Annotated[int, \"Id of the issue to read\"] ) -&gt; str:\n    \"Read details of an issue by its id\"\n    ...\n    &lt;logic&gt;\n    ...\n    return f\"Issue Details: {issue_details}\"\n\ndef comment_issue(issue_id: Annotated[int, \"Id of the issue to comment\"], markdown_comment: Annotated[str, \"Markdown comment to add to the issue\"]) -&gt; str:\n    \"Add markdown comments to an specific issue by its id\"\n    ...\n    &lt;logic&gt;\n    ...\n    return f\"Issue with ID {issue_id} has been successfully commented\"\n\n\nasync def main():\n    await setup_search_engine(show_progress=True, embedding_model=\"cohere/embed-english-v3.0\")\n\n    # Override agent default tools\n    my_tools = tools.base_tools + [read_open_repository_issues, read_issue_details, comment_issue]\n    developer_agent: AgentConfig = DeveloperAgent.to_agent_config(tools=my_tools)\n\n    # Run the agent\n    await run_agent(\n        agent=developer_agent, \n        input=\"\"\"Read details about last tech debt issue,\n    brainstorm about how to solve it and code the proposed solution\"\"\",\n    )\n</code></pre>"},{"location":"documentation/tools/#related-docs","title":"Related Docs","text":"<ul> <li>Configuration</li> <li>Agents</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This is a collection of examples that demonstrate how to use PlusCoder through CLI or Python.</p> <ol> <li>Basic coding instruction: A simple example of using PlusCoder to instruct agent to generate a README file from a repository.</li> <li>Issues Management: An example of using PlusCoder to read an issue in a repository and code a proposed solution.</li> <li>Code Review: Use PlusCoder to review a code and suggest improvements given some guidelines.</li> <li>Custom Agents: Demonstrate how to create a custom agent using PlusCoder.</li> <li>Remote Configuration: Show how to remotely configure PlusCoder for reusing agents across different users.</li> </ol>"},{"location":"local/","title":"Local Development Guide","text":""},{"location":"local/#overview","title":"Overview","text":"<p>Explore how to use PlusCoder in local development environments, including CLI usage, configuration, and custom agent creation.</p>"},{"location":"local/#sections","title":"Sections","text":"<ul> <li>Command Line Interface (CLI)</li> <li>Local Configuration</li> <li>Interacting with PlusCoder</li> <li>Creating Custom Agents</li> <li>Tips and Tricks</li> </ul>"},{"location":"local/agents/","title":"Agents","text":""},{"location":"local/cli/","title":"Command Line Interface (CLI)","text":""},{"location":"local/configuration/","title":"Local Configuration","text":""},{"location":"local/talk_to_pluscoder/","title":"Interacting with PlusCoder","text":""},{"location":"local/tips_and_tricks/","title":"Tips and Tricks","text":""},{"location":"local/tools/","title":"Tools","text":""}]}