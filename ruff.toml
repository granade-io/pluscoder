target-version = "py312"
line-length = 120

extend-include = [
  "tests/*",  # may be removed (not sure)
  "*.ipynb",
]

# exclude = ["tests/*"]

[lint]
preview = true

select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  # "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "E",     # pycodestyle
  "E722",  # bare except statements | EXPLICIT ENFORCEMENT
  "EM",    # flake8-errmsg
  # "ERA",    # eradicate | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "EXE",  # flake8-executable
  "F",    # Pyflakes
  "F401", # remove unused imports | EXPLICIT ENFORCEMENT
  "FA",   # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  # "FIX",    # flake8-fixme | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "FLY",  # flynt
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "N",    # pep8-naming
  "NPY",  # NumPy-specific rules
  "PD",   # pandas-vet
  "PERF", # Perflint
  "PIE",  # flake8-pie
  "PL",   # Pylint
  "PT",   # flake8-pytest-style
  # "PTH",    # flake8-use-pathlib | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "PYI",    # flake8-py
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "SLF",    # flake8-self
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "T201",   # print statements | EXPLICIT ENFORCEMENT
  "T203",   # print statements | EXPLICIT ENFORCEMENT
  "TCH",    # flake8-type-checking
  "TCH004", # misuse of typing.TYPE_CHECKING
  # "TD",     # flake8-todos | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "TID", # flake8-tidy-imports
  "W",   # pycodestyle
  "YTT", # flake8-2020
  # "ANN", # flake8-annotations | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  # "COM",   # flake8-commas | The following rules may cause conflicts when used with the formatter: `COM812`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.
  # "CPY",   # flake8-copyright | ****************** preview ******************
  # "D",     # pydocstyle | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  # "ISC",  # flake8-implicit-str-concat | The following rules may cause conflicts when used with the formatter: `COM812`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.
  # "LOG",  # flake8-logging | ****************** preview ******************
  # "PGH",  # pygrep-hooks | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  # "Q",  # flake8-quotes | The `flake8-quotes.inline-quotes="single"` option is incompatible with the formatter's `format.quote-style="double"`. We recommend disabling `Q000` and `Q003` when using the formatter, which enforces a consistent quote style. Alternatively, set both options to either `"single"` or `"double"`.
  # "T20",  # flake8-print
  # "TRIO",  # flake8-trio | ****************** preview ******************
  # "TRY", # tryceratops | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  # "UP", # pyupgrade | :::::::::::::::::: TOO RISKY YET ::::::::::::::::::
]

# TODO: Enable docstrings
# "D101",
# "D102",
# "D103",

extend-select = [
  "E262",   # no-space-after-inline-comment
  "PGH004", # Use specific rule codes when using noqa
  "S404",   # `subprocess` module is possibly insecure
  # "PLC0415", # `import` should be at the top-level of a file
  # "FURB", # refurb | ****************** preview ******************
]

ignore = [
  "A001",    # Variable is shadowing a Python builtin | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "A002",    # Argument is shadowing a Python builtin | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "A003",    # Class attribute is shadowing a Python builtin | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "C416",    # Unnecessary `list` comprehension (rewrite using `list()`) 
  "C901",    # too complex
  "E501",    # line too long
  "E741",
  "PLR0913", # Too many arguments in function definition (n > 5) | ****************** preview ******************
  "PLR0917", # Too many positional arguments (n/5) | ****************** preview ******************
  "PLR6301", # Method `{method_name}` could be a function, class method, or static method | ****************** preview ******************
  "PLW0603", # Using the global statement to update obj is discouraged | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "S104",    # Possible binding to all interfaces | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  "T201",    # print statements (we use them for debugging)
  "TD003",   # Missing issue link on the line following this TODO (https://docs.astral.sh/ruff/rules/missing-todo-link/)
  "TRY300",  # Consider moving this statement to an `else` block | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$
  # "FIX002", # Prevents us from adding 'TODO' comments as it asks for them to get resolved before committing, which is not always possible.
  "T203",    # pprint found
  "PLR2004",
  "PLR0915",
  "RUF005",
  "PLR0911",
  "RUF012",
  "RUF001",
  "RUF003",
  "B005",
  "B006",
  "PLR0912",
  "S404",    # `subprocess` module is possibly insecure
  "S602",    # `subprocess` call with `shell=True` identified, security issue
  "BLE001",  # Do not catch blind exception: `Exception` | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "FBT001",  # Boolean-typed positional argument in function definition | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "FBT002",  # Boolean default positional argument in function definition | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "FBT003",  # Boolean positional value in function call | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "S112",    # `try`-`except`-`continue` detected, consider logging the exception | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "S113",    # Probable use of `requests` call without timeout" | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "DTZ005",  # `datetime.datetime.now()` called without a `tz` argument | $$$$$$$$$$$$$$$$$$ NOT ENFORCED YET $$$$$$$$$$$$$$$$$$ # NOTE: Try to enforce this
  "PIE804",  # Unnecessary `dict` kwargs
  "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "S604",    # Function call with `shell=True` parameter identified, security issue
  "C405",    # Unnecessary `list` literal (rewrite as a `set` literal)
  "N818",    # Exception name `AgentException` should be named with an Error suffix
  "EM101",   # Exception must not use a string literal, assign to variable first,
  "EXE001",  # Shebang is present but file is not executable
]

explicit-preview-rules = true

unfixable = [
  "T201", # disable auto fix for print statements
  "T203", # disable auto fix for print statements
  # Never enforce `E501` (line length violations).
]

[lint.per-file-ignores]

"**/tests/**.py" = ["S101", "T201", "T203"]
# Ignore import violations in all `__init__.py` files.
"__init__.py" = ["E402", "F401", "F403", "F811"]
"notebooks/**/*.ipynb" = [
  "E402",
  "ERA001",
  "F841",
  "FIX002",
  "INP001",
  "PLE1142",
  "PTH123",
  "S404",
  "S603",
  "W291",
  # NOTE: Disable the following in the future
  # W291: Trailing whitespace
]
"notebooks/**/*.py" = ["ERA001", "F841", "FIX002", "INP001"]
# T201: print statements
# T203: print statements
# S101: Use of `assert` detected
# INP001 File is part of an implicit namespace package. Add an `__init__.py`.
# PT009: Use a regular `assert` instead of unittest-style `assertEqual`
"tests/**.py" = ["S101", "T201", "T203", "PT009"]

[format]
preview = false
# Use `\n` line endings for all files
line-ending = "lf"

[lint.pycodestyle]
max-line-length = 120

# [lint.flake8-annotations]
# ignore-fully-untyped = false

[lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[lint.isort]
force-single-line = true

[lint.mccabe]
max-complexity = 14

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 8 # default is 5 | # max-pos-args = 3

[lint.pyupgrade]
keep-runtime-typing = true # Preserve types, even if a file imports `from __future__ import annotations`.
